{
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for the Zond Explorer",
        "title": "Zond Explorer API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/address/{address}/balance": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the balance information of an address (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address"
                ],
                "summary": "Get address balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AddressResponse"
                        }
                    },
                    "403": {
                        "description": "Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Address not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/address/{address}/details": {
            "get": {
                "description": "Get full details of a specific address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address"
                ],
                "summary": "Get address details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AddressDetailResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/address/{address}/transactions": {
            "get": {
                "description": "Get list of transactions related to the given address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address"
                ],
                "summary": "Get address transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.TransactionDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/blocks/hash/{hash}": {
            "get": {
                "description": "Retrieve block details using its hash",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Get block by hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockResponse"
                        }
                    },
                    "404": {
                        "description": "Block not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/blocks/latest": {
            "get": {
                "description": "Retrieve a paginated list of recent blocks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Get the latest blocks",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of blocks to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BlocksResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch blocks",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/blocks/{block_number}": {
            "get": {
                "description": "Retrieve details of a block using its number",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Get block by number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Block number",
                        "name": "block_number",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BlockResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid block number",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Block not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/chain": {
            "get": {
                "description": "Retrieve general information about the current chain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chain"
                ],
                "summary": "Get chain info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ChainResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch chain info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/forks": {
            "get": {
                "description": "Retrieve all recorded chain forks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forks"
                ],
                "summary": "Get forks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ForksResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch forks",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/reorgs": {
            "get": {
                "description": "Retrieve a list of chain reorganization events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reorgs"
                ],
                "summary": "Get reorgs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ReorgsResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch reorgs",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/search/suggestions": {
            "get": {
                "description": "Return suggestions based on a partial query input (e.g. address, tx hash, block number)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Get search suggestions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search input string (partial hash, address, or block number)",
                        "name": "query",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SearchSuggestionsResponse"
                        }
                    },
                    "400": {
                        "description": "Query parameter required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/validators": {
            "get": {
                "description": "Retrieve a list of all active validators",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validators"
                ],
                "summary": "Get validators",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ValidatorsResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch validators",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/validators/{validatorId}": {
            "get": {
                "description": "Retrieve a specific validator by its index",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validators"
                ],
                "summary": "Get validator by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Validator index",
                        "name": "validatorId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ValidatorDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid validator index",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Validator not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return JWT token if credentials are valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Username already exists or invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to hash password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/beacon-deposits": {
            "get": {
                "description": "Retrieve a paginated list of beacon chain deposits",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Beacon"
                ],
                "summary": "Get beacon deposits",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BeaconDepositsPaginatedResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch beacon deposits",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/beacon-withdrawals": {
            "get": {
                "description": "Retrieve a paginated list of beacon chain withdrawals",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Beacon"
                ],
                "summary": "Get beacon withdrawals",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BeaconWithdrawalsPaginatedResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve beacon withdrawals",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AddressDetailResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "balance": {
                    "type": "number"
                },
                "total_gas_used": {
                    "type": "integer"
                },
                "transaction_count": {
                    "type": "integer"
                }
            }
        },
        "dto.AddressResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "balance": {
                    "type": "string"
                }
            }
        },
        "dto.BeaconDepositResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string",
                    "example": "32000000000"
                },
                "block_number": {
                    "type": "integer",
                    "example": 123456
                },
                "log_index": {
                    "type": "integer",
                    "example": 5
                },
                "retrieved_from": {
                    "type": "string",
                    "example": "geth"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-05-06T14:20:00Z"
                },
                "tx_hash": {
                    "type": "string",
                    "example": "0xabc123..."
                },
                "validator_index": {
                    "type": "integer",
                    "example": 2940
                }
            }
        },
        "dto.BeaconDepositsPaginatedResponse": {
            "type": "object",
            "properties": {
                "deposits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BeaconDepositResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.BeaconWithdrawalResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string",
                    "example": "34000000000"
                },
                "block_number": {
                    "type": "integer",
                    "example": 1200456
                },
                "log_index": {
                    "type": "integer",
                    "example": 7
                },
                "retrieved_from": {
                    "type": "string",
                    "example": "geth"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-05-06T14:20:00Z"
                },
                "tx_hash": {
                    "type": "string",
                    "example": "0xabc123..."
                },
                "validator_index": {
                    "type": "integer",
                    "example": 389
                }
            }
        },
        "dto.BeaconWithdrawalsPaginatedResponse": {
            "type": "object",
            "properties": {
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                },
                "withdrawals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BeaconWithdrawalResponse"
                    }
                }
            }
        },
        "dto.BlockResponse": {
            "type": "object",
            "properties": {
                "base_fee_per_gas": {
                    "type": "integer",
                    "example": 1000000000
                },
                "block_hash": {
                    "type": "string",
                    "example": "0xabc123..."
                },
                "block_number": {
                    "type": "integer",
                    "example": 123456
                },
                "canonical": {
                    "type": "boolean",
                    "example": true
                },
                "chain_id": {
                    "type": "integer",
                    "example": 1
                },
                "extra_data": {
                    "type": "string",
                    "example": "0x..."
                },
                "gas_limit": {
                    "type": "string",
                    "example": "30000000"
                },
                "gas_used": {
                    "type": "string",
                    "example": "21000"
                },
                "logs_bloom": {
                    "type": "string",
                    "example": "0x..."
                },
                "miner_address": {
                    "type": "string",
                    "example": "0x1a2b..."
                },
                "parent_hash": {
                    "type": "string",
                    "example": "0xdeadbeef..."
                },
                "receipts_root": {
                    "type": "string",
                    "example": "0xreceipt..."
                },
                "retrieved_from": {
                    "type": "string",
                    "example": "geth"
                },
                "size": {
                    "type": "integer",
                    "example": 1200
                },
                "state_root": {
                    "type": "string",
                    "example": "0xstate..."
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-05-06T10:00:00Z"
                },
                "transaction_count": {
                    "type": "integer",
                    "example": 15
                },
                "transactions_root": {
                    "type": "string",
                    "example": "0xroot..."
                }
            }
        },
        "dto.BlocksResponse": {
            "type": "object",
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BlockResponse"
                    }
                }
            }
        },
        "dto.ChainResponse": {
            "type": "object",
            "properties": {
                "chain_id": {
                    "type": "integer",
                    "example": 1
                },
                "latest_block": {
                    "type": "integer",
                    "example": 1245678
                },
                "retrieved_from": {
                    "type": "string",
                    "example": "geth"
                },
                "total_blocks": {
                    "type": "integer",
                    "example": 1245678
                }
            }
        },
        "dto.ForkResponse": {
            "type": "object",
            "properties": {
                "block_number": {
                    "type": "integer",
                    "example": 17890000
                },
                "chain_id": {
                    "type": "integer",
                    "example": 1
                },
                "fork_name": {
                    "type": "string",
                    "example": "Shanghai"
                },
                "retrieved_from": {
                    "type": "string",
                    "example": "geth"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-05-06T10:00:00Z"
                }
            }
        },
        "dto.ForksResponse": {
            "type": "object",
            "properties": {
                "forks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ForkResponse"
                    }
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "is_paid": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "is_paid": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.PaginationInfo": {
            "type": "object",
            "properties": {
                "has_next": {
                    "type": "boolean",
                    "example": true
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "dto.ReorgResponse": {
            "type": "object",
            "properties": {
                "block_number": {
                    "type": "integer",
                    "example": 1234567
                },
                "chain_id": {
                    "type": "integer",
                    "example": 1
                },
                "depth": {
                    "type": "integer",
                    "example": 2
                },
                "new_block_hash": {
                    "type": "string",
                    "example": "0xnewhash..."
                },
                "old_block_hash": {
                    "type": "string",
                    "example": "0xoldhash..."
                },
                "retrieved_from": {
                    "type": "string",
                    "example": "nethermind"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-05-06T12:00:00Z"
                }
            }
        },
        "dto.ReorgsResponse": {
            "type": "object",
            "properties": {
                "reorgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ReorgResponse"
                    }
                }
            }
        },
        "dto.SearchSuggestionsResponse": {
            "type": "object",
            "properties": {
                "suggestions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Suggestion"
                    }
                }
            }
        },
        "dto.Suggestion": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "example": "transaction"
                },
                "value": {
                    "type": "string",
                    "example": "0xabc123..."
                }
            }
        },
        "dto.TransactionDTO": {
            "type": "object",
            "properties": {
                "block_number": {
                    "type": "integer"
                },
                "from": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "dto.ValidatorDetailResponse": {
            "type": "object",
            "properties": {
                "activation_epoch": {
                    "type": "integer",
                    "example": 194
                },
                "balance": {
                    "type": "integer",
                    "example": 32000000000
                },
                "chain_id": {
                    "type": "integer",
                    "example": 1
                },
                "effective_balance": {
                    "type": "integer",
                    "example": 32000000000
                },
                "exit_epoch": {
                    "type": "integer",
                    "example": 0
                },
                "index": {
                    "type": "integer",
                    "example": 1234
                },
                "public_key": {
                    "type": "string",
                    "example": "0xabc123..."
                },
                "retrieved_from": {
                    "type": "string",
                    "example": "prysm"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                }
            }
        },
        "dto.ValidatorResponse": {
            "type": "object",
            "properties": {
                "activation_epoch": {
                    "type": "integer",
                    "example": 194
                },
                "balance": {
                    "type": "string",
                    "example": "32000000000"
                },
                "chain_id": {
                    "type": "integer",
                    "example": 1
                },
                "effective_balance": {
                    "type": "string",
                    "example": "32000000000"
                },
                "exit_epoch": {
                    "type": "integer",
                    "example": 0
                },
                "index": {
                    "type": "integer",
                    "example": 1234
                },
                "public_key": {
                    "type": "string",
                    "example": "0xabc123..."
                },
                "retrieved_from": {
                    "type": "string",
                    "example": "lighthouse"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                }
            }
        },
        "dto.ValidatorsResponse": {
            "type": "object",
            "properties": {
                "validators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ValidatorResponse"
                    }
                }
            }
        }
    }
}